	#include <stdio.h>
	#include <ENGG1500Lib.h>
		#define ENA 5
		#define ENB 6
		#define IN1 8
		#define IN2 9
		#define IN3 10
		#define IN4 11

	float x1 = -22.5;
	float x2 = -7.5;
	float x3 = 7.5;
	float x4 = 22.5;
	float w1;
	float w2;
	float w3;
	float w4;

	float IRS1 = A3;//left to right of bot
	float IRS2 = A2;
	float IRS3 = A1;
	float IRS4 = A0;
	float times[5] = {0};

	const float goal = 0; 
	float Ed = 0;
	const float Kp = 1;
	const float Ki = 0;
	const float Kd = 0;
	float I = 0;
	float newE = 0;
	float Errors[5] = {0};
	float linedist = 0; //taken from which ir sensor is active
	float den;
	float num;
	int i;
	const int maxarr = 2;
	float distarr[maxarr] = {0.0f};
	float ave = 0;



	float basevall = 50;
	float basevalr = 50;
	float limitl = 90; 
	float limitr = 90;
	float minl = 45; 
	float minr = 45;
	float pwml, pwmr;



	void setup(){
		pinMode(A0, INPUT);
		pinMode(A1, INPUT);
		pinMode(A2, INPUT);
		pinMode(A3, INPUT);

		pinMode(ENA, OUTPUT); //set ENA as an output
		pinMode(ENB, OUTPUT); //set ENB as an output
		pinMode(IN1, OUTPUT); //set IN1 as an output
		pinMode(IN2, OUTPUT); //set IN2 as an output
		pinMode(IN3, OUTPUT); //set IN3 as an output
		pinMode(IN4, OUTPUT); //set IN4 as an output

		enc_init(); //initialise encoders

		Serial.begin(9600);
	}
	void loop(){
		w1 = analogRead(IRS1); //Gather values for 4 IR sensors
		w2 = analogRead(IRS2);
		w3 = analogRead(IRS3);
		w4 = analogRead(IRS4);

		num = (w1*x1 + w2*x2 + w3*x3 + w4*x4);
		den = (w1 + w2 + w3 + w4);
		linedist = num/den;

		for (i = 0; i < maxarr; i++){
		   distarr [i] = distarr [i + 1];
		}
		distarr[maxarr - 1] = linedist;
		for( i = 0, ave = 0; i < maxarr; i++){
		  ave += distarr[i];
		}
		ave /= maxarr;

		newE = goal - ave;//current error
		for(i=0; i<4; i++){
			times[i] = times[i+1];//shifting time array
		}
		times[5]=millis();//current elapsed time
		for(i=0; i<4; i++){
			errors[i] = errors[i+1];
		}
		errors[5]=newE;
		for(i=5; i>1; i--){//calculating Ed and Ei 
			Ed+=((errors[i]-errors[i-1])/(times[i]-times[i-1]));//using gradient from Error vs Time graph
			Ei+=((0.5*(errors[i]+errors[i-1]))*(times[i]-times[i-1]));//using trapezoidal rule here
		}
		pwml = basevall - newE*Kp - Ed*Kd - Ei*Ki;
		pwmr = basevalr + newE*Kp + Ed*Kd + Ei*Ki;

		  
		leftForwards(); // defining the fucntions
		rightForwards();

		  if (pwml < 0){
			leftBackwards();
			pwml *= -1;
		  }
		  if (pwmr < 0){
			rightBackwards();
			pwml *= -1;  
		  }

		  if (pwml > limitl)
			pwml = limitl;           
		  if (pwmr > limitr)
			pwmr = limitr;
			
		  if (pwml < minl)
			pwml = minl;           
		  if (pwmr < minr)
			pwmr = minr;        


		Serial.print("L");
		Serial.println(pwml);
		Serial.print("R");
		Serial.println(pwmr);

		 
		analogWrite(5,pwml); // left motor
		analogWrite(6,pwmr); // right motor

	}

	void leftForwards(void){ //This function sets IN1 = LOW and IN2 = HIGH in order to set the direction to forwards for motor 1
		digitalWrite(8, LOW); //IN1
		digitalWrite(9, HIGH); //IN2
	}
	void leftBackwards(void){ //This function sets IN1 = HIGH and IN2 = LOW in order to set the direction to backwards for motor 1
		digitalWrite(8, HIGH); //IN1
		digitalWrite(9, LOW); //IN2
	}
	void rightForwards(void){ //This function sets IN3 = LOW and IN4 = HIGH in order to set the direction to forwards for motor 2
		digitalWrite(10, LOW); //IN3
		digitalWrite(11, HIGH); //IN4
	}
	void rightBackwards(void){ //This function sets IN3 = HIGH and IN4 = LOW in order to set the direction to forwards for motor 2
		digitalWrite(10, HIGH); //IN3
		digitalWrite(11, LOW); //IN4
	}
