#include <stdio.h>
#include <ENGG1500Lib.h>

const int IRS1=A1;
  int inputVal1 = 0;
  int inputVal2 = 0;
  int inputVal3 = 0;
  int inputVal4 = 0;
  /* the next set of initialisations is for the calculation and function for
  detecting line position
  */
    float lineposition(void);
    float x1 = -22 , x2 = -7, x3 = 7, x4 = 22;//measurements in mm
    float xline;
    float w1, w2, w3, w4;
    float a;
    float linediff;
    float delaytime;
//START
void setup() {//need to initialise other IR sensors
  // put your setup code here, to run once:
  pinMode(5,OUTPUT); //set ENA as an output
  pinMode(6,OUTPUT); //set ENB as an output
  pinMode(8,OUTPUT); //set IN1 as an output
  pinMode(9,OUTPUT); //set IN2 as an output
  pinMode(10,OUTPUT); //set IN3 as an output
  pinMode(11,OUTPUT); //set IN4 as an output
  pinMode(,OUTPUT);//IR sensor 1
  pinMode(,OUTPUT);//IR sensor 1
  pinMode(,OUTPUT);//IR sensor 2
  pinMode(,OUTPUT);//IR sensor 2
  pinMode(,OUTPUT);//IR sensor 3
  pinMode(,OUTPUT);//IR sensor 3
  Serial.begin(9600);
  
  delay(5000);//delay before starting loop
}


    void loop(){
    inputVal1 = analogRead(IRS1); //Gather values for 4 IR sensors
    inputVal2 = analogRead(IRS2);
    inputVal3 = analogRead(IRS3);
    inputVal4 = analogRead(IRS4);
    }
/*void loop() {
  inputVal = analogRead(IRS1);
  Serial.println(inputVal);
  if (analogRead(IRS1) < 100){
  leftForwards();  //see the left motor to run forwards
  rightForwards();  //set the right motor to run forwards
  analogWrite(5,200); 
  analogWrite(6,200);
  }else{
    analogWrite(5,0);
    delay (2);
    analogWrite(6,0);
  }
}*/


  float lineposition(void){
    //need to read the values from each sensor and initialise them as w1,w2,w3,w4
    void loop(){
    xline = ((w1*x1 + w2*x2 + w3*x3 + w4*x4)/(w1 + w2 + w3 + w4))
    linediff = xline;//this could be positive or negative, depending on what side line is of centre
    delaytime = linediff/10;/*this may need to be tweaked to work better as results come in. Just a number for 
    the moment*/
    float turn(void)//input turn function
    /* the idea is that the turn function has a degree of difference so say the left wheel turns by x 
    and the right wheel turns by y. now there is a difference of a between x and y. that difference 
    is determined by the value of linediff. So the further the line is left the greater the difference 
    between the rotation of the left and right wheel and the same for when the line is on the right. 
    this means that the car will turn steeper when it is further off centre and not leave the track.*/
    /* turn function should look something like */
    
    if(xline<-3){
        leftBackwards();
        rightForwards();
        delay(delaytime);
        /*this is small increments before it scans again. the increments 
        should also get smaller as the line gets closer to the centre of the robot so that it doesn't zig zag
        aggressively but drives smoothly*/
    }
    else if(xline>3){
        leftForwards();
        rightBackwards();
        delay(delaytime);
    }
    else if(-3<=xline<=3){
        leftForwards();
        rightForwards();
        delay();
    }
    }
        
        
/* from here its just functions for the wheels forwards and backwards*/
void leftForwards(void)
{
  digitalWrite(8,LOW);
  digitalWrite(9,HIGH);
}

void leftBackwards(void)
{
  digitalWrite(8,HIGH);
  digitalWrite(9,LOW);
}

void rightForwards(void)
{
  digitalWrite(10,LOW);
  digitalWrite(11,HIGH);
}
void rightBackwards(void)
{
  digitalWrite(10,HIGH);
  digitalWrite(11,LOW);
}
//END
